name: CI/CD Full Pipeline (Desarrollo)

on:
  push:
    branches:
      - desarrollo
  pull_request:
    branches:
      - desarrollo

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: 663497092862.dkr.ecr.us-east-1.amazonaws.com
  IMAGE_TAG: latest

jobs:
  # ---------------------------
  # Backend: Linter StyleCop
  # ---------------------------
  backend-linter:
    name: Backend - Ejecutar StyleCop Linter
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Instalar dependencias npm
        working-directory: Backend
        run: npm install
      - name: Agregar StyleCop.Analyzers
        working-directory: Backend
        run: dotnet add Servicio_1/Api.Candidatos/Api.Candidatos/Api.Candidatos.csproj package StyleCop.Analyzers
      - name: Restaurar paquetes .NET
        working-directory: Backend
        run: dotnet restore Servicio_1/Api.Candidatos/Api.Candidatos/Api.Candidatos.csproj
      - name: Construir proyecto con StyleCop
        working-directory: Backend
        run: dotnet build Servicio_1/Api.Candidatos/Api.Candidatos/Api.Candidatos.csproj /p:RunStyleCop=true

  # ---------------------------
  # Backend: Tests
  # ---------------------------
  backend-test:
    name: Backend - Ejecutar Tests
    runs-on: ubuntu-latest
    needs: backend-linter
    steps:
      - uses: actions/checkout@v3
      - name: Instalar dependencias npm
        working-directory: Backend
        run: npm install
      - name: Ejecutar Dotnet Tests para Servicio_1
        working-directory: Backend
        run: npm run test:1

  # ---------------------------
  # Frontend: Linter
  # ---------------------------
  frontend-linter:
    name: Frontend - Ejecutar ESLint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Instalar dependencias npm
        working-directory: Frontend
        run: npm install
      - name: Ejecutar ESLint
        working-directory: Frontend
        run: npm run lint

  # ---------------------------
  # Frontend: Tests
  # ---------------------------
  frontend-test:
    name: Frontend - Ejecutar Tests
    runs-on: ubuntu-latest
    needs: frontend-linter
    steps:
      - uses: actions/checkout@v3
      - name: Instalar dependencias npm
        working-directory: Frontend
        run: npm install
      - name: Ejecutar Vitest
        working-directory: Frontend
        run: npm run test

  # ---------------------------
  # Deploy ECR (Terraform)
  # ---------------------------
  terraform-ecr:
    name: Terraform - Crear ECR
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Configurar AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.DEV_AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Obtener archivo env.tfvars
        run: aws s3 cp s3://gtio-votacion-config-dev/env.tfvars Terraform/env.tfvars

      - name: Configurar Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "latest"

      - name: Terraform Init
        working-directory: Terraform
        run: terraform init

      - name: Terraform Format
        working-directory: Terraform
        run: terraform fmt

      - name: Terraform Validate
        working-directory: Terraform
        run: terraform validate

      - name: Terraform Apply
        working-directory: Terraform
        run: terraform apply -auto-approve -target=module.ecr -var-file=env.tfvars

  # ---------------------------
  # Build y Push
  # ---------------------------
  build-push:
    name: Build, Tag y Push imágenes a ECR
    runs-on: ubuntu-latest
    needs: terraform-ecr
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Configurar AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.DEV_AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Login a ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Instalar Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.6/docker-compose-linux-x86_64" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose version

      - name: Crear archivo .env
        run: aws s3 cp s3://gtio-votacion-config-dev/.env .env

      - name: Build imágenes con docker-compose
        run: docker-compose build

      - name: Tag y push imágenes
        run: |
          # Definimos las imágenes locales
          API_CANDIDATOS_IMAGE=gtio_votacion-api
          FRONTEND_IMAGE=gtio_votacion-frontend

          # Definimos las imágenes en ECR
          ECR_API_CANDIDATOS_IMAGE=gtio_votacion/api
          ECR_FRONTEND_IMAGE=gtio_votacion/frontend

          # API CANDIDATOS
          docker tag $API_CANDIDATOS_IMAGE ${{ env.ECR_REGISTRY }}/$ECR_API_CANDIDATOS_IMAGE:${{ env.IMAGE_TAG }}
          docker push ${{ env.ECR_REGISTRY }}/$ECR_API_CANDIDATOS_IMAGE:${{ env.IMAGE_TAG }}

          # FRONTEND
          docker tag $FRONTEND_IMAGE ${{ env.ECR_REGISTRY }}/$ECR_FRONTEND_IMAGE:${{ env.IMAGE_TAG }}
          docker push ${{ env.ECR_REGISTRY }}/$ECR_FRONTEND_IMAGE:${{ env.IMAGE_TAG }}

  # ---------------------------
  # Terraform - Crear infraestructura
  # ---------------------------
  terraform-infrastructure:
    name: Terraform - Crear infraestructura
    runs-on: ubuntu-latest
    needs: build-push
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Configurar AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.DEV_AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Crear archivo env.tfvars
        run: aws s3 cp s3://gtio-votacion-config-dev/env.tfvars Terraform/env.tfvars

      - name: Configurar Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.11.4"

      - name: Terraform Init
        working-directory: Terraform
        run: echo yes | terraform init -input=false

      - name: Terraform Format
        working-directory: Terraform
        run: terraform fmt

      - name: Terraform Validate
        working-directory: Terraform
        run: terraform validate

      - name: Terraform Apply
        working-directory: Terraform
        run: terraform apply -auto-approve -var-file=env.tfvars -target=module.infrastructure -target=module.api -target=module.frontend

      - name: Actualizar servicios de ECS
        working-directory: Terraform
        shell: bash
        run: |
          CLUSTER_NAME=Cluster_Api_1
          SERVICE_NAME_API=api-candidatos-service
          SERVICE_NAME_FRONTEND=frontend-service

          # Actualizar el servicio de la API
          aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME_API --force-new-deployment
          # Actualizar el servicio del frontend
          aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME_FRONTEND --force-new-deployment

  # ---------------------------
  # Poblar la base de datos
  # ---------------------------
  populate-db:
    name: Poblar base de datos
    runs-on: ubuntu-latest
    needs: terraform-infrastructure
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Ejecutar script de poblamiento cuando esté disponible
        run: |
          echo "Esperando a que la API esté disponible para poblar la base de datos..."
          until curl --silent --fail -H "x-api-key: ${{ secrets.ADMIN_API_KEY }}" -X GET http://balanceador-candidatos-1394402301.${{ env.AWS_REGION }}.elb.amazonaws.com:8080/api/Candidates/CrearBaseDeDatos; do
            echo "La API aún no está disponible o falló el poblamiento. Reintentando en 10 segundos..."
            sleep 10
          done

  # ---------------------------
  # Cálculo de costes con Infracost
  # ---------------------------
  infracost:
    name: Infracost - Cálculo de costes
    runs-on: ubuntu-latest
    needs: terraform-infrastructure
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Infracost
        uses: infracost/actions/setup@v3
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: Ejecutar Infracost en desarrollo y main
        run: |
          infracost breakdown --path=. \
                    --format=json \
                    --out-file=infracost.json

          infracost upload --path=infracost.json || echo "Pasar aun con errores de políticas"
