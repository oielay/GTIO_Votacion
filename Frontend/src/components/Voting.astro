---
import { obtenerTodosCandidatos } from "../utils/getDataFromApi.ts";

let participantes = await obtenerTodosCandidatos();
const primerParticipante = participantes[0];
const featuresArr: string[] = primerParticipante.features.toString().split(",");
---

<div class="vote-container">
  <h2>Votaciones</h2>
  <p>Escoja a su participante favorito para votar:</p>
  <div class="candidate">
    <div class="participant">
      <div class="image-container">
        <button id="prev-button" class="arrow">←</button>
        <img
          id="current-image"
          src={primerParticipante.imageVoting}
          alt=`Imagen del participante ${primerParticipante.userName}`
        />
        <button id="next-button" class="arrow">→</button>
      </div>
      <p class="name">{primerParticipante.userName}</p>
    </div>
    <div class="features">
      <h2>Características</h2>
      <p class="features-participant-name">
        Conozca las características del participante:
      </p>
      <ul class="features-list">
        {featuresArr.map((feature) => <li>{feature}</li>)}
      </ul>
      <button class="voting-button">Votar</button>
    </div>
  </div>
</div>

<style>
  .vote-container {
    display: flex;
    flex-direction: column;
    justify-content: space-around;
    align-items: flex-start;
  }

  .candidate {
    align-self: center;
    display: flex;
    flex-direction: row;
    gap: 4rem;
    align-items: center;
  }

  .participant {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
  }

  .image-container {
    display: flex;
    align-items: center;
  }

  .arrow {
    background: none;
    border: none;
    font-size: 2rem;
    cursor: pointer;
  }

  .name {
    font-size: 1.5rem;
    font-weight: 600;
    margin-top: 1rem;
  }

  #current-image {
    width: 190px;
    height: auto;
  }

  .voting-button {
    align-self: center;
    padding: 8px 16px;
    background-color: #007bff;
    color: white;
    text-align: center;
    text-decoration: none;
    border-radius: 4px;
    font-weight: 600;
  }

  .features {
    align-self: flex-start;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    height: 100%;
  }

  h2,
  .features > p {
    margin-bottom: 0;
  }

  .features > h2 {
    margin-top: 0;
  }

  @media screen and (max-width: 768px) {
    .candidate {
      flex-direction: column;
      gap: 2rem;
    }

    .features {
      align-self: center;
    }

    .image-container {
      justify-content: center;
    }
  }
</style>

<script>
  import { obtenerTodosCandidatos } from "../utils/getDataFromApi.ts";
  import { actualizarVotosCandidato } from "../utils/getDataFromApi.ts";

  const PARTICIPANTS = await obtenerTodosCandidatos();

  let currentIndex = 0;
  const images = PARTICIPANTS.map((participant) => participant.imageVoting);
  const names = PARTICIPANTS.map((participant) => participant.userName);

  function changeImage(direction: string) {
    if (direction === "prev") {
      currentIndex = (currentIndex - 1 + images.length) % images.length;
    } else if (direction === "next") {
      currentIndex = (currentIndex + 1) % images.length;
    }
    const imageElement = document.getElementById(
      "current-image"
    ) as HTMLImageElement;
    if (imageElement) {
      imageElement.src = images[currentIndex];
      imageElement.alt = "Imagen del participante " + names[currentIndex];
    }
  }

  function changeFeatures() {
    const featuresList = document.querySelector(".features-list");
    if (featuresList) {
      featuresList.innerHTML = "";
    }

    const features = PARTICIPANTS[currentIndex].features.toString();
    const featuresArr: string[] = features.split(",");

    featuresArr.forEach((feature) => {
      const featureElement = document.createElement("li");
      featureElement.textContent = feature;
      featuresList?.appendChild(featureElement);
    });
  }

  function changeName() {
    const nameElement = document.querySelector(".name");
    if (nameElement) {
      nameElement.textContent = names[currentIndex];
    }
  }

  function vote() {
    createVotedElement();
    addVoteToParticipant();
  }

  function createVotedElement() {
    const voteMessage = document.createElement("div");
    voteMessage.textContent =
      "Se ha votado correctamente al participante " + names[currentIndex];
    voteMessage.style.position = "fixed";
    voteMessage.style.top = "15%";
    voteMessage.style.left = "50%";
    voteMessage.style.transform = "translate(-50%, -15%)";
    voteMessage.style.backgroundColor = "rgba(0, 128, 0, 0.8)"; // Green background with some transparency
    voteMessage.style.color = "black";
    voteMessage.style.padding = "1rem";
    voteMessage.style.borderRadius = "8px";
    voteMessage.style.zIndex = "1000";
    document.body.appendChild(voteMessage);

    setTimeout(() => {
      document.body.removeChild(voteMessage);
    }, 3000);
  }

  async function addVoteToParticipant() {
    const participants = await obtenerTodosCandidatos();
    const participant = participants[currentIndex];

    actualizarVotosCandidato(participant.id, participant.votes + 1);
  }

  document.getElementById("prev-button")?.addEventListener("click", () => {
    changeImage("prev");
    changeName();
    changeFeatures();
  });

  document.getElementById("next-button")?.addEventListener("click", () => {
    changeImage("next");
    changeName();
    changeFeatures();
  });

  document.querySelector(".voting-button")?.addEventListener("click", vote);
</script>
